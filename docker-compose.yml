services:
    # accommodation api
    accommodation-api:
        container_name: accommodation-api
        build: ./accommodation_api
        volumes:
            - ./accommodation_api:/app
        depends_on:
            mq:
                condition: service_healthy
            db:
                condition: service_healthy
        ports:
            - 5000:5000
        environment:
            ENV: ${ENV:?Missing ENV}
            DB_URI: ${DB_URI:?Missing DB_URI}
            RABBIT_URI: ${RABBIT_URI:?Missing RABBIT_URI}

        restart: always

    # listing api
    listing-api:
        container_name: listing-api
        build: ./listing_api
        volumes:
            - ./listing_api:/app
        depends_on:
            mq:
                condition: service_healthy
            db:
                condition: service_healthy
        ports:
            - 5001:5000
        environment:
            ENV: ${ENV:?Missing ENV}
            DB_URI: ${DB_URI:?Missing DB_URI}
            RABBIT_URI: ${RABBIT_URI:?Missing RABBIT_URI}

        restart: always

    # event bus
    mq:
        container_name: rabbitmq
        image: rabbitmq:3-management
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - ./volumes/rabbitmq:/var/lib/rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBIT_USER:?Missing RABBIT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS:?Missing RABBIT_PASS}
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 5s
            timeout: 5s
            retries: 6

    # database
    db:
        container_name: main_db
        image: postgres:17
        ports:
          - 5432:5432
        volumes:
            # data persistence
            - ./volumes/postgres:/var/lib/postgresql/data
            # init script
            # - ./docker/postgres:/docker-entrypoint-initdb.d
        restart: always
        environment:
            POSTGRES_USER: ${DB_USER:?Missing DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS:?Missing DB_PASS}
        healthcheck:
            test: pg_isready -d postgres -U ${DB_USER:?Missing DB_USER}
            interval: 5s
            timeout: 5s
            retries: 6
        labels:
            - traefik.enable=false

    # # celery worker
    # worker:
    #     container_name: worker
    #     build: ./worker
    #     volumes:
    #         - ./worker:/app
    #     depends_on:
    #         mq:
    #             condition: service_healthy
    #         b:
    #             condition: service_started
    #     restart: always
    #     environment:
    #         CELERY_BROKER_URI: ${CELERY_BROKER_URI:?Missing CELERY_BROKER_URI}
    #         CELERY_BACKEND_URI: ${CELERY_BACKEND_URI:?Missing CELERY_BACKEND_URI}
    